// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CustomerInterface.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SharedInterface.Interfaces.CustomInterface {
  public static partial class CustomerInterface
  {
    static readonly string __ServiceName = "SharedInterface.CustomerInterface";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::SharedInterface.Interfaces.CustomInterface.OpenAccountRequest> __Marshaller_SharedInterface_OpenAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SharedInterface.Interfaces.CustomInterface.OpenAccountRequest.Parser));
    static readonly grpc::Marshaller<global::SharedInterface.Interfaces.CustomInterface.OpenAccountResponse> __Marshaller_SharedInterface_OpenAccountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SharedInterface.Interfaces.CustomInterface.OpenAccountResponse.Parser));
    static readonly grpc::Marshaller<global::SharedInterface.Interfaces.CustomInterface.WithdrawRequest> __Marshaller_SharedInterface_WithdrawRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SharedInterface.Interfaces.CustomInterface.WithdrawRequest.Parser));
    static readonly grpc::Marshaller<global::SharedInterface.Interfaces.CustomInterface.WithdrawResponse> __Marshaller_SharedInterface_WithdrawResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SharedInterface.Interfaces.CustomInterface.WithdrawResponse.Parser));
    static readonly grpc::Marshaller<global::SharedInterface.Interfaces.CustomInterface.DepositRequest> __Marshaller_SharedInterface_DepositRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SharedInterface.Interfaces.CustomInterface.DepositRequest.Parser));
    static readonly grpc::Marshaller<global::SharedInterface.Interfaces.CustomInterface.Empty> __Marshaller_SharedInterface_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SharedInterface.Interfaces.CustomInterface.Empty.Parser));
    static readonly grpc::Marshaller<global::SharedInterface.Interfaces.CustomInterface.GetHistoryRequest> __Marshaller_SharedInterface_GetHistoryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SharedInterface.Interfaces.CustomInterface.GetHistoryRequest.Parser));
    static readonly grpc::Marshaller<global::SharedInterface.Interfaces.CustomInterface.GetHistoryResponse> __Marshaller_SharedInterface_GetHistoryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SharedInterface.Interfaces.CustomInterface.GetHistoryResponse.Parser));
    static readonly grpc::Marshaller<global::SharedInterface.Interfaces.CustomInterface.CloseAccountRequest> __Marshaller_SharedInterface_CloseAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SharedInterface.Interfaces.CustomInterface.CloseAccountRequest.Parser));
    static readonly grpc::Marshaller<global::SharedInterface.Interfaces.CustomInterface.CloseAccountResponse> __Marshaller_SharedInterface_CloseAccountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SharedInterface.Interfaces.CustomInterface.CloseAccountResponse.Parser));

    static readonly grpc::Method<global::SharedInterface.Interfaces.CustomInterface.OpenAccountRequest, global::SharedInterface.Interfaces.CustomInterface.OpenAccountResponse> __Method_OpenAccountAsync = new grpc::Method<global::SharedInterface.Interfaces.CustomInterface.OpenAccountRequest, global::SharedInterface.Interfaces.CustomInterface.OpenAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OpenAccountAsync",
        __Marshaller_SharedInterface_OpenAccountRequest,
        __Marshaller_SharedInterface_OpenAccountResponse);

    static readonly grpc::Method<global::SharedInterface.Interfaces.CustomInterface.WithdrawRequest, global::SharedInterface.Interfaces.CustomInterface.WithdrawResponse> __Method_WithdrawAsync = new grpc::Method<global::SharedInterface.Interfaces.CustomInterface.WithdrawRequest, global::SharedInterface.Interfaces.CustomInterface.WithdrawResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WithdrawAsync",
        __Marshaller_SharedInterface_WithdrawRequest,
        __Marshaller_SharedInterface_WithdrawResponse);

    static readonly grpc::Method<global::SharedInterface.Interfaces.CustomInterface.DepositRequest, global::SharedInterface.Interfaces.CustomInterface.Empty> __Method_DepositAsync = new grpc::Method<global::SharedInterface.Interfaces.CustomInterface.DepositRequest, global::SharedInterface.Interfaces.CustomInterface.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DepositAsync",
        __Marshaller_SharedInterface_DepositRequest,
        __Marshaller_SharedInterface_Empty);

    static readonly grpc::Method<global::SharedInterface.Interfaces.CustomInterface.GetHistoryRequest, global::SharedInterface.Interfaces.CustomInterface.GetHistoryResponse> __Method_GetHistoryAsync = new grpc::Method<global::SharedInterface.Interfaces.CustomInterface.GetHistoryRequest, global::SharedInterface.Interfaces.CustomInterface.GetHistoryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHistoryAsync",
        __Marshaller_SharedInterface_GetHistoryRequest,
        __Marshaller_SharedInterface_GetHistoryResponse);

    static readonly grpc::Method<global::SharedInterface.Interfaces.CustomInterface.CloseAccountRequest, global::SharedInterface.Interfaces.CustomInterface.CloseAccountResponse> __Method_CloseAccountAsync = new grpc::Method<global::SharedInterface.Interfaces.CustomInterface.CloseAccountRequest, global::SharedInterface.Interfaces.CustomInterface.CloseAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CloseAccountAsync",
        __Marshaller_SharedInterface_CloseAccountRequest,
        __Marshaller_SharedInterface_CloseAccountResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SharedInterface.Interfaces.CustomInterface.CustomerInterfaceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CustomerInterface</summary>
    [grpc::BindServiceMethod(typeof(CustomerInterface), "BindService")]
    public abstract partial class CustomerInterfaceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::SharedInterface.Interfaces.CustomInterface.OpenAccountResponse> OpenAccountAsync(global::SharedInterface.Interfaces.CustomInterface.OpenAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SharedInterface.Interfaces.CustomInterface.WithdrawResponse> WithdrawAsync(global::SharedInterface.Interfaces.CustomInterface.WithdrawRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SharedInterface.Interfaces.CustomInterface.Empty> DepositAsync(global::SharedInterface.Interfaces.CustomInterface.DepositRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SharedInterface.Interfaces.CustomInterface.GetHistoryResponse> GetHistoryAsync(global::SharedInterface.Interfaces.CustomInterface.GetHistoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SharedInterface.Interfaces.CustomInterface.CloseAccountResponse> CloseAccountAsync(global::SharedInterface.Interfaces.CustomInterface.CloseAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CustomerInterface</summary>
    public partial class CustomerInterfaceClient : grpc::ClientBase<CustomerInterfaceClient>
    {
      /// <summary>Creates a new client for CustomerInterface</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CustomerInterfaceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CustomerInterface that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CustomerInterfaceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CustomerInterfaceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CustomerInterfaceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::SharedInterface.Interfaces.CustomInterface.OpenAccountResponse OpenAccountAsync(global::SharedInterface.Interfaces.CustomInterface.OpenAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SharedInterface.Interfaces.CustomInterface.OpenAccountResponse OpenAccountAsync(global::SharedInterface.Interfaces.CustomInterface.OpenAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OpenAccountAsync, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SharedInterface.Interfaces.CustomInterface.OpenAccountResponse> OpenAccountAsyncAsync(global::SharedInterface.Interfaces.CustomInterface.OpenAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenAccountAsyncAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SharedInterface.Interfaces.CustomInterface.OpenAccountResponse> OpenAccountAsyncAsync(global::SharedInterface.Interfaces.CustomInterface.OpenAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OpenAccountAsync, null, options, request);
      }
      public virtual global::SharedInterface.Interfaces.CustomInterface.WithdrawResponse WithdrawAsync(global::SharedInterface.Interfaces.CustomInterface.WithdrawRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SharedInterface.Interfaces.CustomInterface.WithdrawResponse WithdrawAsync(global::SharedInterface.Interfaces.CustomInterface.WithdrawRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WithdrawAsync, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SharedInterface.Interfaces.CustomInterface.WithdrawResponse> WithdrawAsyncAsync(global::SharedInterface.Interfaces.CustomInterface.WithdrawRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawAsyncAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SharedInterface.Interfaces.CustomInterface.WithdrawResponse> WithdrawAsyncAsync(global::SharedInterface.Interfaces.CustomInterface.WithdrawRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WithdrawAsync, null, options, request);
      }
      public virtual global::SharedInterface.Interfaces.CustomInterface.Empty DepositAsync(global::SharedInterface.Interfaces.CustomInterface.DepositRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DepositAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SharedInterface.Interfaces.CustomInterface.Empty DepositAsync(global::SharedInterface.Interfaces.CustomInterface.DepositRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DepositAsync, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SharedInterface.Interfaces.CustomInterface.Empty> DepositAsyncAsync(global::SharedInterface.Interfaces.CustomInterface.DepositRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DepositAsyncAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SharedInterface.Interfaces.CustomInterface.Empty> DepositAsyncAsync(global::SharedInterface.Interfaces.CustomInterface.DepositRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DepositAsync, null, options, request);
      }
      public virtual global::SharedInterface.Interfaces.CustomInterface.GetHistoryResponse GetHistoryAsync(global::SharedInterface.Interfaces.CustomInterface.GetHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHistoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SharedInterface.Interfaces.CustomInterface.GetHistoryResponse GetHistoryAsync(global::SharedInterface.Interfaces.CustomInterface.GetHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHistoryAsync, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SharedInterface.Interfaces.CustomInterface.GetHistoryResponse> GetHistoryAsyncAsync(global::SharedInterface.Interfaces.CustomInterface.GetHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHistoryAsyncAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SharedInterface.Interfaces.CustomInterface.GetHistoryResponse> GetHistoryAsyncAsync(global::SharedInterface.Interfaces.CustomInterface.GetHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHistoryAsync, null, options, request);
      }
      public virtual global::SharedInterface.Interfaces.CustomInterface.CloseAccountResponse CloseAccountAsync(global::SharedInterface.Interfaces.CustomInterface.CloseAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CloseAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SharedInterface.Interfaces.CustomInterface.CloseAccountResponse CloseAccountAsync(global::SharedInterface.Interfaces.CustomInterface.CloseAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CloseAccountAsync, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SharedInterface.Interfaces.CustomInterface.CloseAccountResponse> CloseAccountAsyncAsync(global::SharedInterface.Interfaces.CustomInterface.CloseAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CloseAccountAsyncAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SharedInterface.Interfaces.CustomInterface.CloseAccountResponse> CloseAccountAsyncAsync(global::SharedInterface.Interfaces.CustomInterface.CloseAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CloseAccountAsync, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CustomerInterfaceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CustomerInterfaceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CustomerInterfaceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_OpenAccountAsync, serviceImpl.OpenAccountAsync)
          .AddMethod(__Method_WithdrawAsync, serviceImpl.WithdrawAsync)
          .AddMethod(__Method_DepositAsync, serviceImpl.DepositAsync)
          .AddMethod(__Method_GetHistoryAsync, serviceImpl.GetHistoryAsync)
          .AddMethod(__Method_CloseAccountAsync, serviceImpl.CloseAccountAsync).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CustomerInterfaceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_OpenAccountAsync, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SharedInterface.Interfaces.CustomInterface.OpenAccountRequest, global::SharedInterface.Interfaces.CustomInterface.OpenAccountResponse>(serviceImpl.OpenAccountAsync));
      serviceBinder.AddMethod(__Method_WithdrawAsync, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SharedInterface.Interfaces.CustomInterface.WithdrawRequest, global::SharedInterface.Interfaces.CustomInterface.WithdrawResponse>(serviceImpl.WithdrawAsync));
      serviceBinder.AddMethod(__Method_DepositAsync, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SharedInterface.Interfaces.CustomInterface.DepositRequest, global::SharedInterface.Interfaces.CustomInterface.Empty>(serviceImpl.DepositAsync));
      serviceBinder.AddMethod(__Method_GetHistoryAsync, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SharedInterface.Interfaces.CustomInterface.GetHistoryRequest, global::SharedInterface.Interfaces.CustomInterface.GetHistoryResponse>(serviceImpl.GetHistoryAsync));
      serviceBinder.AddMethod(__Method_CloseAccountAsync, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SharedInterface.Interfaces.CustomInterface.CloseAccountRequest, global::SharedInterface.Interfaces.CustomInterface.CloseAccountResponse>(serviceImpl.CloseAccountAsync));
    }

  }
}
#endregion
